import openml
import warnings
import numpy as np
from sklearn.utils.multiclass import type_of_target

def save(GoodDatasets):
    with open("ValidDatasets.txt", "w") as txt_file:
        for id in GoodDatasets:
            txt_file.write(str(id) + ",")
warnings.simplefilter(action='ignore', category=FutureWarning)
openml.config.apikey = '2754bfd67b4aa8a5854f00d3fc4bdd89'
TargetNames = []
Datasets = []
### LOCAL DATASETS ###
# try:
    
#     #Datasets.append(pd.read_csv('./datasets_classifier/titanic.csv'))
#     #TargetNames.append('Survived')
#     Datasets.append(pd.read_csv('./datasets_classifier/heart.csv'))
#     TargetNames.append('target')
#     Datasets.append(pd.read_csv('./datasets_classifier/titanic.csv'))#     TargetNames.append('Survived')
# except FileNotFoundError:
#     print(
#         "Path do dataset está errado, deve conter uma pasta 'dataset' no path do ficheiro autoBagging")
#     quit()
######################

####### OPENML #######
index = [471, 551, 552, 555, 556, 557, 558, 560, 561, 562, 566, 567, 568, 569, 570, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 671, 672, 673, 674, 675, 676, 680, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 661, 663, 664, 665, 666, 668, 670, 1448, 1485, 1589, 1600, 1571, 1572, 1574, 1579, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 681, 684, 686, 687, 688, 689, 690, 691, 692, 693, 695, 696, 697, 698, 699, 890, 1035, 1037, 1016, 1027, 1028, 1029, 1030, 1516, 315, 301, 308, 327, 328, 572, 573, 575, 576, 577, 578, 579, 580, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 1089, 1090, 1094, 1096, 1097, 1098, 1099, 1072, 1076, 1070, 1091, 1093, 541, 542, 543, 544, 545, 546, 547, 549, 550, 1245, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 1433, 1435, 1436, 1412, 1419, 1420, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 1228, 456, 482, 483, 485, 487, 490, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 521, 522, 523, 524, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 539, 540, 511, 512, 513, 515, 516, 518, 519, 520, 491, 492, 493, 494, 497, 498, 500, 1042, 1051, 1058, 1563, 1564, 4551, 4552, 4553, 4544, 23381, 23420, 23499, 6332, 23380, 4329, 4340, 4531, 4540, 4353, 23516, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 203, 204, 205, 206, 207, 208, 209, 210, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 211, 212, 213, 214, 217, 412, 416, 419, 405, 406, 431, 433, 434, 440, 424, 426, 427, 428, 429, 409, 421, 422, 441, 442, 446, 189, 190, 373, 374, 376, 379, 380, 346, 8, 287, 294, 298, 299, 41996, 41997, 41998, 1449, 42176, 40670, 42177, 42178, 42097, 42098, 42099, 41938, 41939, 41919, 41928, 41907, 42123, 42159, 42111, 42112, 42113, 42107, 42110, 42165, 42166, 42167, 42169, 42172, 41894, 41897, 42071, 41943, 41944, 41945, 41946, 41950, 42002, 42003, 42010, 42051, 42055, 42056, 42065, 42066, 42070, 42041, 42045, 42046, 42050, 42021, 42025, 42026, 42030, 42031, 42035, 42036, 42040, 42011, 42015, 42016, 42020, 42133, 42182, 42125, 41164, 40981, 41143, 41146, 40594, 40595, 40597, 40589, 40496, 40497, 40498, 40499, 40475, 40476, 40477, 40478, 40505, 40601, 40864, 40869, 40646, 40647, 40648, 40649, 40650, 40660, 40691, 40693, 40663, 40664, 40665, 40666, 40669, 40701, 40702, 40704, 40705, 40706, 40707, 40708, 40709, 40710, 40671, 40677, 40678, 40680, 40681, 40682, 40683, 40686, 40687, 40690, 40711, 40971, 40976, 40713, 40714, 40728, 41002, 41003, 41004, 41005, 41006, 41007, 40983, 40966, 40900, 40916, 41464, 41465, 41468, 41470, 41471, 41473, 41474, 41475, 41476, 41477, 41478, 41479, 41482, 41483, 41484, 41485, 41486, 41487, 41488, 41489, 41490, 41511, 41514, 41515, 41516, 41517, 41518, 41519, 41491, 41492, 41496, 41510, 41144, 41145, 41265, 41544, 41545, 41546, 41547, 41548, 41549, 41550, 41538, 41551, 41552, 41553, 41554, 41555, 41556, 41557, 41558, 41559, 41521, 41567, 41568, 41582, 41583, 41863, 41864, 41866, 41867, 41868, 41834, 41839, 41841, 41844, 41846, 41847, 41848, 41849, 41857, 41858, 41872, 41874, 41875, 41882, 41821, 41826, 41829, 41830, 41812, 41815, 41818, 41811, 41753, 41754, 41756, 41760, 41744, 41746, 41750, 41764, 41765, 41766, 41769, 41721, 41722, 41724, 41725, 41726, 41730, 41731, 41733, 41737, 41740, 41791, 41797, 41783, 41784, 41785, 41788, 41790, 41801, 41803, 41082, 41158, 40993, 40994, 40997, 40998, 40999, 41000, 41156, 41187, 41021, 41091, 41701, 41702, 41703, 41705, 41707, 41674, 41675, 41679, 41680, 41713, 41716, 41719, 41720, 41668, 41669, 41682, 41684, 41685, 41700, 41981, 41973, 41976, 41977, 41978, 41980, 41961, 41962, 41964, 41966, 41967, 41968, 41969, 41952, 41953, 1047, 1455, 1442, 1443, 1444, 1451, 1452, 1453, 1460, 1463, 1548, 1551, 1566, 1554, 1555, 1553, 1559, 1557, 1560, 1565, 1545, 1100, 1167, 1538, 1541, 1542, 1530, 1543, 1544, 1529, 1535, 1467, 1513, 1520, 1511, 1512, 1507, 1508, 1506, 1504, 1468, 1484, 1482, 1479, 1465, 1466, 1473, 1475, 1472, 1480, 1487, 1501, 1489, 1495, 1496, 1498, 1492, 1494, 1491, 1497, 42184, 40910, 40592, 1493, 42091, 40982, 42188, 42193, 42192, 42196, 42195, 42197, 40979, 4153, 42200, 42198, 40588, 1462, 678, 40536, 1441, 1523, 553, 1488, 1524, 1528, 1450, 1413, 42201, 1517, 1518, 42186, 42203, 42204, 1446, 1500, 1447, 1546, 1525, 40700, 40975, 1519, 1527, 1539, 1540, 1526, 1499, 1549, 1552, 1558, 1490, 1556, 1547, 1464, 41972, 1510, 4538, 40984, 40945, 2, 22, 10, 11, 15, 16, 3, 18, 20, 375, 377, 342, 343, 378, 381, 718, 719, 683, 685, 679, 682, 723, 714, 715, 724, 725, 720, 721, 716, 717, 694, 713, 850, 851, 857, 858, 845, 847, 859, 860, 852, 853, 844, 841, 842, 854, 855, 848, 849, 993, 994, 995, 980, 978, 979, 987, 988, 982, 983, 984, 989, 990, 991, 992, 985, 986, 976, 46, 48, 49, 51, 52, 53, 56, 57, 59, 54, 55, 43, 44, 163, 60, 50, 757, 758, 759, 760, 745, 746, 747, 748, 753, 754, 761, 762, 755, 756, 751, 752, 749, 750, 897, 898, 891, 892, 882, 899, 900, 886, 887, 888, 889, 895, 896, 893, 894, 884, 885, 1007, 1008, 1004, 1005, 1006, 1000, 1001, 1002, 1003, 1011, 1012, 998, 999, 1009, 1010, 1013, 1014, 1015, 996, 997, 479, 480, 481, 488, 472, 474, 469, 470, 465, 466, 475, 476, 477, 467, 468, 940, 941, 954, 955, 952, 953, 956, 957, 942, 943, 944, 945, 949, 946, 947, 950, 951, 443, 454, 455, 457, 458, 459, 452, 453, 460, 444, 448, 449, 450, 451, 463, 464, 461, 462, 1065, 1066, 1050, 1056, 1059, 1060, 1061, 1063, 1064, 1054, 1055, 1049, 1067, 1062, 382, 740, 741, 742, 738, 739, 735, 732, 733, 736, 737, 728, 729, 730, 731, 726, 743, 744, 839, 840, 824, 825, 830, 831, 832, 833, 834, 828, 829, 826, 827, 835, 836, 837, 838, 966, 967, 964, 965, 960, 961, 970, 971, 974, 975, 972, 973, 962, 963, 958, 968, 969, 23, 24, 25, 164, 171, 172, 181, 182, 285, 183, 185, 186, 187, 188, 277, 275, 276, 801, 802, 785, 786, 787, 798, 799, 800, 796, 797, 788, 789, 783, 784, 790, 791, 794, 795, 792, 793, 923, 924, 925, 930, 931, 938, 939, 934, 935, 921, 922, 928, 929, 926, 927, 932, 933, 936, 937, 12, 13, 14, 9, 34, 35, 36, 28, 29, 30, 41, 42, 27, 37, 38, 39, 40, 810, 815, 816, 817, 818, 819, 811, 812, 803, 804, 805, 806, 820, 807, 808, 813, 814, 902, 903, 912, 913, 914, 915, 916, 904, 905, 919, 920, 917, 918, 908, 909, 906, 907, 910, 911, 300, 307, 4, 5, 312, 313, 316, 339, 340, 337, 338, 329, 333, 311, 335, 336, 334, 767, 768, 769, 770, 771, 765, 766, 763, 764, 778, 779, 772, 773, 774, 775, 776, 777, 780, 782, 863, 864, 865, 874, 875, 876, 861, 862, 873, 866, 867, 877, 878, 879, 880, 868, 869, 870, 871, 1038, 1041, 1017, 1018, 1021, 1022, 1045, 1026, 1048, 1020, 1023, 1025, 1068, 1069, 1071, 62, 1073, 1121, 1075, 61, 40474, 1115, 1116, 1117, 31, 7, 278 ]
GoodDatasets = []
for i in index:
    try:
        dataset = openml.datasets.get_dataset(i)
        X, y, categorical_indicator, attribute_names = dataset.get_data(dataset_format='dataframe')
        target = dataset.default_target_attribute
        dtype = X[target].dtype
        y_type = type_of_target(X[target])
        
        if y_type in ['binary', 'multiclass', 'multiclass-multioutput',
                      'multilabel-indicator', 'multilabel-sequences']:
            if dtype in (np.object,):
                print("Dataset Válido = ",y_type)
                Datasets.append(X)
                TargetNames.append(target)
                GoodDatasets.append(i)
            elif dtype in (np.int, np.int32, np.int64, np.float, np.float32,
                        np.float64, int, float):
                print("Dataset Válido = ",y_type)
                Datasets.append(X)
                TargetNames.append(target)
                GoodDatasets.append(i)
        else:     
            print("Invalid!")      
        
    except Exception:
        print("Error ", i)
        #print("Valid= ")
        save(GoodDatasets)

print("Valid Datasets:", *GoodDatasets)

#####################