import openml
import warnings
import numpy as np
from sklearn.utils.multiclass import type_of_target

def save(GoodDatasets):
    with open("ValidDatasets.txt", "w") as txt_file:
        for id in GoodDatasets:
            txt_file.write(str(id) + ",")


warnings.simplefilter(action='ignore', category=FutureWarning)
openml.config.apikey = '819d1d52e9314798feeb0d96fbd45b7f'
TargetNames = []
Datasets = []
####### OPENML #######
index = [31, 10101, 9914, 145804, 146065, 146064, 125923, 3, 3913, 3917, 9957, 9946, 3918, 9967, 3903, 145872, 37, 3493, 9971, 3492, 145862, 49, 9952, 3902, 3896, 145857, 9980, 43, 145953, 145847, 9978, 145855, 10093, 9970, 3485, 145972, 145836, 145878, 3494, 145976, 3950, 3891, 145839, 9889, 145979, 34536, 9976, 145834, 145853, 146066, 9977, 145848, 6566, 16, 11, 12, 15, 14, 32, 29, 146607, 53, 28, 18, 22, 23, 3549, 2079, 2074, 45, 3560, 41, 9981, 14966, 125922, 125920, 9964, 3022, 9960, 14969, 9985, 3904, 3021, 9910, 36, 21, 24, 58, 20, 3481, 9950, 146082, 3543, 9955, 3561, 9954, 125921, 9956, 146085, 3512, 3567, 14968, 9979, 14967, 34538, 146824, 145677, 146820, 146822, 146817, 146800, 146819, 4, 7, 146821, 14954, 2, 167141, 59, 167140, 146818, 2075, 146803, 5, 125966, 146197, 167211, 146227, 146802, 167132, 3647, 167125, 282, 30, 9, 272, 2073, 2068, 57, 145682, 125968, 125969, 3731, 3748, 3602, 3739, 42, 3779, 1, 47, 55, 3758, 3876, 3620, 3837, 3694, 39, 3592, 3540, 3832, 10, 3555, 52, 3784, 3649, 3753, 3613, 3676, 3580, 54, 3552, 3765, 3538, 3614, 3818, 3648]
# index = [31, 10101, 9914, 145804, 146065, 146064, 125923, 3, 3913, 3917, 9957, 9946, 3918, 9967, 3903, 145872, 37, 3493, 9971, 3492, 145862, 49, 9952, 3902, 3899, 3896, 145857, 9980, 43, 145953, 9983, 145847, 9978, 145855, 10093, 9970, 3485, 145972, 145836, 219, 145878, 3494, 14951, 145976, 3950, 3891, 3954, 145839, 3889, 9889, 145979, 34536, 9976, 145834, 14965, 7295, 145853, 6, 146066, 9977, 145848, 34537, 6566, 146012, 16, 11, 12, 15, 14, 32, 29, 146607, 53, 28, 145833, 18, 34539, 22, 23, 14971, 3549, 2079, 2074, 45, 3560, 14952, 41, 9981, 14966, 125922, 125920, 9964, 3022, 9960, 14969, 9985, 3904, 3021, 9910, 36, 21, 24, 58, 20, 3481, 146606, 14970, 9950, 146082, 3543, 9955, 3573, 3561, 9954, 125921, 9956, 146085, 7592, 3512, 3567, 14968, 14964, 3510, 9979, 9911, 14967, 9986, 34538, 9968, 146824, 145677, 146195, 3948, 3946, 146820, 146822, 146817, 146800, 146819, 4, 7, 146821, 14954, 2, 167141, 167119, 59, 167140, 146818, 2075, 146803, 5, 125966, 146197, 167211, 146227, 146802, 167132, 3647, 167125, 282, 30, 9, 272, 2073, 26, 2068, 57, 145682, 125968, 2076, 125969, 3731, 3748, 2071, 3602, 3739, 42, 3779, 1, 47, 55, 3758, 3876, 3620, 3837, 167120, 3694, 39, 3592, 3540, 3832, 10, 3555, 52, 3784, 3649, 3753, 3613, 3676, 3580, 54, 3552, 3765, 3538, 3614, 3818, 3648, 33, 1917, 2077, 3742, 3628, 13, 3654, 3585, 27, 3673, 3724, 3577, 34, 3923, 50, 51, 40, 38, 3019, 3542, 3679, 35, 48, 7287, 3736, 3599, 3888, 3642, 3774, 3596, 2067, 3610, 3788, 3743, 3874, 3781, 3857, 3759, 3744, 3919, 3806, 3796, 3911, 3749, 3795, 3763, 3622, 3794, 3811, 3661, 3914, 3800, 3833, 9909, 3653, 3858, 3859, 3798, 3860, 3883, 3752, 3799, 3812, 3905, 3769, 3685, 3659, 3884, 3660, 9903, 3735, 3640, 3695, 3734, 3740, 3868, 3657, 3729, 3751, 9905, 3670, 3771, 3901, 3841, 3636, 3706, 3629, 3677, 3615, 3645, 3668, 3772, 3689, 3641, 3658, 3747, 3619, 3915, 9906, 3733, 3741, 3590, 3732, 3839, 3632, 3672, 3854, 3898, 3836, 3638, 3644, 3877, 3627, 3715, 3727, 3810, 3843, 3920, 3612, 3656, 3616, 3821, 3909, 3618, 3804, 3825, 3887, 3699, 3703, 3785, 3789, 3630, 3813, 3814, 3866, 3684, 3681, 3720, 3834, 3916, 3634, 3712, 3756, 3783, 3842, 9904, 3921, 9902, 3697, 3778, 3907, 3737, 3770, 3583, 3635, 3495, 3539, 3786, 3698, 3582, 3603, 3869, 3587, 2065, 3598, 3608, 3849, 3586, 3591, 3607, 3601, 3692, 3846, 3594, 3669, 3683, 3809, 3716, 3639, 3693, 3496, 2382, 3746, 3757, 3631, 3691, 3633, 3949, 3718, 3797, 3808, 3872, 3885, 3682, 3738, 3643, 3655, 3646, 3713, 3611, 3863, 2078, 3890, 3878, 3721, 3750, 3807, 3852, 3862, 3880, 3650, 3663, 3761, 3562, 3665, 3910, 3886, 3762, 3787, 3725, 3754, 3666, 3690, 3680, 3838, 3570, 3675, 3709, 3912, 3497, 3717, 3726, 3728, 3824, 3557, 3845, 3851, 3696, 3597, 3701, 3830, 3705, 3503, 3621, 3848, 3873, 3722, 4001, 3823, 3906, 3576, 3700, 3595, 3820, 3835, 3853, 3651, 3831, 3550, 3556, 3674, 3704, 3827, 3826, 3605, 3856, 7306, 3623, 3707, 3575, 3667, 167213, 3881, 3719, 3882, 3012, 2372, 3865, 3637, 3815, 146825, 3578, 3776, 3822, 3767, 3710, 3664, 3766, 3840, 3730, 3773, 3711, 3775, 3574, 3714, 3588, 9984, 3780, 3671, 3617, 3702, 3662, 3937, 3678, 3600, 3589, 3687, 3764, 2275, 3581, 3011, 3609, 3504, 1919, 1939, 3606, 3564, 3584, 9901, 3569, 3498, 3686, 279, 3708, 3500, 3688, 7395, 7396, 167133, 285, 3499, 1902, 7394, 284, 1898, 3593, 3559, 267, 3056, 1793, 3064, 281, 1807, 273, 1819, 287, 3053, 2113, 1813, 1818, 3544, 3057, 269, 2273, 3922, 3900, 10089, 1806, 1821, 3895, 2274, 1767, 259, 1768, 1801, 2272, 3054, 3745, 257, 1816, 2112, 145685, 2142, 3491, 206, 3501, 233, 1803, 1777, 1815, 289, 3844, 10094, 283, 3043, 234, 3055, 254, 1779, 1791, 1823, 1814, 1788, 1817, 1771, 243, 270, 260, 1811, 3563, 1822, 266, 278, 271, 245, 1804, 1802, 2119, 2125, 2124, 3908, 1805, 268, 1785, 3062, 232, 246, 248, 265, 288, 7293, 1794, 2114, 277, 1800, 1812, 3938, 2355, 3059, 3060, 242, 264, 2120, 2352, 235, 244, 1780, 1799, 252, 3061, 280, 1778, 1786, 1792, 250, 251, 2354, 1774, 1782, 2111, 239, 3058, 1775, 2121, 2353, 258, 241, 1787, 1776, 231, 1798, 253, 1765, 1766, 3527, 3045, 240, 1773, 237, 3536, 3524, 1769, 3897, 3940, 3894, 3893, 3518, 1784, 3044, 7555, 3517, 9897, 3942, 7307, 145, 9908, 2932, 10095, 2146, 4462, 3521, 4374, 3529, 10103, 4453, 4360, 4466, 4513, 1856, 322, 2922, 4362, 4352, 4364]
GoodDatasets = []
print("Get Datasets({})".format(len(index)))
# Load and Validate Datasets
n_dataset=1
for i in index:
    try:
        task  = openml.tasks.get_task(i)
        dataset = task.get_dataset()
        data_set_id = task.dataset_id
        X, y, categorical_indicator, attribute_names = dataset.get_data(dataset_format='dataframe')
        target = dataset.default_target_attribute
        dtype = X[target].dtype
        y_type = type_of_target(X[target])
        #print("OpenML Dataset[{}][{}][{}]: {} - {} (examples, features)".format(n_dataset,data_set_id,i,y_type,np.shape(X)))
        if y_type in ['binary', 'multiclass', 'multiclass-multioutput',
                      'multilabel-indicator', 'multilabel-sequences']:
            if dtype == 'category':
                Datasets.append(X)
                TargetNames.append(target)
                GoodDatasets.append(data_set_id)
                print("OpenML Dataset[{}][{}][{}]: {} - {} (examples, features)".format(n_dataset,data_set_id,i,y_type,np.shape(X)))
                n_dataset=n_dataset+1
            elif dtype in (np.object,):
                Datasets.append(X)
                TargetNames.append(target)
                GoodDatasets.append(data_set_id)
                print("OpenML Dataset[{}][{}][{}]: {} - {} (examples, features)".format(n_dataset,data_set_id,i,y_type,np.shape(X)))
                n_dataset=n_dataset+1
            elif dtype in (np.int, np.int32, np.int64, np.float, np.float32,
                np.float64, int, float):
                Datasets.append(X)
                TargetNames.append(target)
                GoodDatasets.append(data_set_id)
                print("OpenML Dataset[{}][{}][{}]: {} - {} (examples, features)".format(n_dataset,data_set_id,i,y_type,np.shape(X)))
                n_dataset=n_dataset+1
        else:     
            print("Invalid!")      
    except Exception as e:
        print("Error ", i, e)
        save(np.unique(GoodDatasets))

save(np.unique(GoodDatasets))
print("Valid Datasets:", *np.unique(GoodDatasets))
#####################