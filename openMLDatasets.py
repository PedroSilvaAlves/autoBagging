import openml
import warnings
import numpy as np
from sklearn.utils.multiclass import type_of_target

def save(GoodDatasets):
    with open("ValidDatasets.txt", "w") as txt_file:
        for id in GoodDatasets:
            txt_file.write(str(id) + ",")
warnings.simplefilter(action='ignore', category=FutureWarning)
openml.config.apikey = '819d1d52e9314798feeb0d96fbd45b7f'
TargetNames = []
Datasets = []
### LOCAL DATASETS ###
# try:
    
#     #Datasets.append(pd.read_csv('./datasets_classifier/titanic.csv'))
#     #TargetNames.append('Survived')
#     Datasets.append(pd.read_csv('./datasets_classifier/heart.csv'))
#     TargetNames.append('target')
#     Datasets.append(pd.read_csv('./datasets_classifier/titanic.csv'))#     TargetNames.append('Survived')
# except FileNotFoundError:
#     print(
#         "Path do dataset está errado, deve conter uma pasta 'dataset' no path do ficheiro autoBagging")
#     quit()
######################

####### OPENML #######
index = [555, 556, 557, 560, 561, 566, 567, 568, 570, 581, 582, 583, 584, 586, 588, 589, 590, 671, 672, 673, 676, 653, 654, 657, 658, 641, 643, 644, 645, 646, 647, 648, 649, 650, 664, 666, 670, 1448, 1600, 703, 704, 709, 712, 686, 689, 690, 695, 699, 1035, 1037, 1016, 1027, 1029, 1030, 315, 301, 575, 576, 577, 578, 579, 580, 592, 593, 595, 596, 597, 598, 599, 1097, 1099, 541, 543, 546, 547, 549, 550, 1245, 631, 632, 633, 635, 637, 638, 622, 623, 626, 627, 628, 612, 613, 614, 615, 616, 617, 618, 619, 620, 1435, 1436, 1412, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 456, 482, 504, 505, 506, 507, 509, 522, 524, 529, 531, 533, 534, 536, 540, 512, 513, 516, 519, 520, 494, 500, 4544, 23380, 4340, 23516, 191, 194, 195, 196, 200, 203, 204, 206, 207, 209, 223, 224, 229, 230, 231, 232, 213, 434, 446, 8, 299, 1449, 40597, 40589, 40497, 40498, 40475, 40476, 40477, 40478, 40646, 40647, 40648, 40649, 40650, 40691, 40693, 40663, 40664, 40665, 40669, 40702, 40704, 40705, 40706, 40707, 40708, 40710, 40671, 40677, 40678, 40680, 40682, 40686, 40687, 40690, 40711, 40971, 40713, 41004, 41005, 41007, 40916, 41265, 40997, 40998, 40999, 41000, 41187, 41021, 1047, 1442, 1443, 1444, 1451, 1453, 1560, 1100, 1167, 1512, 1472, 1498, 1492, 1491, 4153, 1523, 1488, 1524, 1528, 1413, 1446, 1500, 1447, 1546, 40700, 1527, 1499, 1549, 1552, 1558, 1490, 1547, 6332, 23381, 40966, 40982, 40984, 40994, 40983, 1462, 40670, 40701, 41143, 40981, 1480, 40975, 40601, 4329, 511, 1510, 40496, 1511, 1520, 1506, 1545, 1557, 41841, 41844, 41846, 41847, 41848, 41849, 41801, 41803, 41821, 41826, 41829, 41830, 41834, 41839, 41863, 41864, 41866, 41867, 41868, 41857, 41858, 41872, 41874, 41875, 41811, 41812, 41815, 41818, 41882, 41980, 41981, 42003, 41997, 42051, 42056, 42041, 42046, 42021, 42026, 42031, 42036, 42011, 42016, 41496, 41511, 41514, 41515, 41516, 41517, 41518, 41519, 41430, 41700, 41701, 41702, 41703, 41705, 41707, 42133, 42071, 42098, 42110, 42111, 42112, 42113, 42066, 41713, 41716, 41719, 41760, 41764, 41765, 41766, 41769, 41740, 41744, 41746, 41730, 41731, 41733, 41737, 41750, 41753, 41754, 41756, 41720, 41721, 41722, 41724, 41725, 41726, 41783, 41784, 41785, 41788, 41790, 41791, 41797, 41538, 41568, 41583, 42172, 42165, 42166, 42167, 42169, 42186, 42223, 42224, 1028, 41968, 41969, 41976, 41977, 41978, 41919, 41938, 41939, 41894, 41897, 41943, 41945, 41946, 41950, 41928, 40592, 1467, 1464, 1504, 1487, 1493, 1479, 40474, 40945, 1548, 1494, 1553, 1482, 1565, 23499, 1544, 41156, 1530, 1543, 1529, 1589, 1572, 35, 25, 22, 23, 31, 27, 29, 37, 38, 36, 18, 3, 11, 7, 9, 13, 14, 15, 16, 2, 41, 42, 46, 48, 54, 55, 50, 51, 56, 57, 53, 39, 40, 43, 44, 49, 183, 185, 59, 60, 61, 316, 329, 338, 336, 337, 334, 335, 333, 756, 757, 742, 743, 753, 744, 745, 746, 747, 748, 749, 750, 751, 839, 840, 834, 844, 845, 830, 831, 837, 838, 841, 832, 930, 925, 933, 934, 920, 931, 935, 936, 926, 1067, 1065, 1071, 1073, 1068, 1063, 181, 307, 171, 772, 765, 766, 767, 763, 764, 769, 770, 773, 774, 776, 851, 858, 860, 852, 853, 854, 855, 849, 863, 953, 954, 966, 967, 955, 961, 962, 963, 957, 958, 968, 969, 1466, 1508, 1495, 1571, 285, 313, 311, 377, 186, 187, 188, 1555, 1551, 1554, 1452, 1579, 1574, 802, 801, 796, 797, 805, 798, 799, 811, 806, 810, 979, 986, 987, 970, 971, 984, 975, 973, 982, 983, 1542, 738, 740, 741, 732, 737, 728, 730, 733, 824, 825, 826, 827, 818, 820, 813, 814, 914, 915, 904, 903, 918, 917, 908, 909, 906, 907, 912, 913, 910, 911, 1026, 1054, 1049, 1050, 1048, 679, 481, 488, 474, 475, 469, 470, 940, 941, 937, 943, 949, 947, 950, 951, 952, 939, 1115, 1121, 718, 694, 723, 724, 715, 721, 717, 720, 786, 788, 778, 779, 794, 795, 792, 793, 866, 871, 873, 877, 879, 880, 869, 870, 1000, 1003, 1004, 1005, 999, 989, 990, 991, 994, 995, 996, 997, 454, 455, 460, 452, 458, 449, 466, 450, 451, 463, 464, 897, 886, 888, 895, 896, 900, 884, 1008, 1012, 1010, 1011, 1020, 1023, 1025, 1014, 1566 ]
GoodDatasets = []

for i in index:
    try:
        dataset = openml.datasets.get_dataset(i)
        X, y, categorical_indicator, attribute_names = dataset.get_data(dataset_format='dataframe')
        target = dataset.default_target_attribute
        dtype = X[target].dtype
        y_type = type_of_target(X[target])
        
        if y_type in ['binary', 'multiclass', 'multiclass-multioutput',
                      'multilabel-indicator', 'multilabel-sequences']:
            if dtype in (np.int, np.int32, np.int64, np.float, np.float32,
                        np.float64, int, float):
                print("Dataset Válido[{}]= {}".format(i,y_type))
                Datasets.append(X)
                TargetNames.append(target)
                GoodDatasets.append(i)
        else:     
            print("Invalid!", i)      
        
    except Exception:
        print("Error ", i)
        #print("Valid= ")
        save(GoodDatasets)
save(GoodDatasets)
print("Valid Datasets:", *GoodDatasets)
#####################