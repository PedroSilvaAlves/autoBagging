import openml
import warnings
import numpy as np
from sklearn.utils.multiclass import type_of_target

def save(GoodDatasets):
    with open("ValidDatasets.txt", "w") as txt_file:
        for id in GoodDatasets:
            txt_file.write(str(id) + ",")


warnings.simplefilter(action='ignore', category=FutureWarning)
openml.config.apikey = '819d1d52e9314798feeb0d96fbd45b7f'
TargetNames = []
Datasets = []
####### OPENML #######
index = [2295, 52948, 4823, 2285, 4729, 4990, 4958, 2280, 4834, 4850, 4839, 5012, 4883, 4897, 189940, 2291, 2310, 2319, 2304, 2320, 211237, 5015, 189931, 2308, 2286, 2297, 2282, 4857, 2301, 2311, 2315, 2281, 2316, 4835, 2294, 2290, 2284, 2302, 5037, 4866]
index = [2295, 52948, 4823, 2285, 4729, 4990, 4958, 2280, 4834, 4850, 4839, 5012, 4883, 4897, 189940, 2291, 2310, 2319, 2304, 2320, 211237, 5015, 189931, 2308, 2286, 2297, 2282, 4857, 2301, 2311, 2315, 2281, 2316, 4835, 2294, 2290, 2284, 2302, 5037, 4866,92099, 92100, 92206, 92213, 92224, 92228, 92175, 92192, 92198, 92106, 92107, 92461, 92473, 92474, 92495, 92500, 92316, 92326, 92333, 92336, 92339, 92347, 92428, 92367, 92374, 92400, 92254, 92266, 92272, 92902, 92906, 92907, 92909, 92919, 92931, 92945, 92946, 92948, 92949, 92660, 92661, 92676, 92679, 92685, 92687, 92689, 92700, 92501, 92511, 92514, 92520, 92524, 92537, 92538, 92541, 92544, 92855, 92873, 92895, 92830, 92831, 92832, 92833, 92836, 92838, 92847, 92554, 92555, 92559, 92560, 92570, 92574, 92575, 92580, 92589, 92590, 92593, 92714, 92719, 92720, 92722, 92723, 92724, 92734, 92737, 92739, 92745, 92747, 92749, 92756, 92767, 92794, 92795, 92608, 92622, 92640, 92644, 92648, 93055, 93056, 93057, 93069, 93071, 93085, 93090, 93161, 93163, 93167, 93178, 93179, 93192, 93193, 93199, 93108, 93114, 93116, 93117, 93118, 93124, 93126, 93150, 92963, 92969, 92975, 92980, 92990, 92991, 92993, 92997, 93016, 93022, 93031, 93032, 93034, 93040, 93041, 93201, 93207, 93215, 93217, 93229, 93239, 93354, 93362, 93372, 93387, 93397, 93301, 93304, 93311, 93312, 93330, 93335, 93344, 93346, 93252, 93280, 93296, 93453, 93454, 93463, 93467, 93469, 93478, 93487, 93490, 93500, 93704, 93718, 93724, 93739, 93747, 93751, 93756, 93764, 93651, 93655, 93660, 93672, 93673, 93692, 93698, 93700, 93811, 93836, 93839, 93840, 93844, 93850, 99504, 99530, 99541, 99546, 99057, 99063, 99075, 99077, 99079, 99088, 99314, 99342, 98920, 98929, 98942, 99004, 99005, 99006, 99017, 99021, 99023, 99024, 99028, 99035, 99038, 99049, 99607, 99615, 99620, 99621, 99637, 99353, 99356, 99363, 99365, 99369, 99373, 99375, 99377, 99379, 99386, 99387, 99453, 99456, 99460, 99461, 99479, 99490, 99494, 99497, 99499, 99405, 99418, 99419, 99421, 99422, 99431, 99443, 99444, 99446, 99450, 99252, 99258, 99274, 99284, 99665, 99672, 99687, 99690, 99803, 99804, 99808, 99812, 99817, 99818, 99822, 99828, 99840, 99847, 99849, 99711, 99716, 99717, 99732, 99737, 99739, 99977, 99987, 99989, 99751, 99758, 99760, 99766, 99797, 99798, 99903, 99917, 99920, 99924, 99936, 99943, 99855, 99858, 99862, 99864, 99865, 99869, 99870, 99876, 99886, 99891, 99894, 99553, 99556, 99557, 99563, 99592, 95102, 95103, 95104, 95110, 95147, 95001, 95003, 95005, 95010, 95012, 95013, 95024, 95033, 95036, 95040, 94661, 94670, 94672, 94681, 94696, 94760, 94764, 94771, 94785, 94787, 94788, 94790, 94796, 94904, 94905, 94915, 94916, 94926, 94940, 94949, 94960, 94964, 94995, 94996, 94857, 94862, 94867, 94869, 94872, 94879, 94884, 94889, 94897, 94705, 94712, 94718, 94725, 94730, 94733, 94736, 94803, 94811, 94813, 94818, 94825, 94839, 94841, 95054, 95060, 95061, 95062, 95075, 95081, 95099, 96160, 96166, 96198, 96315, 96318, 96336, 96343, 96210, 96224, 96232, 96234, 96239, 96244, 96250, 96053, 96060, 96062, 96072, 96073, 96076, 96079, 96085, 96010, 96013, 96017, 96021, 96047, 96050, 96107, 96111, 96114, 96117, 96126, 96146, 96150, 96261, 96267, 96277, 96282, 96285, 95976, 95980, 95993, 95997, 97802, 97803, 97819, 97830, 97845, 97848, 97850, 97904, 97911, 97914, 97659, 97665, 97669, 97675, 97685, 97697, 97710, 97715, 97733, 97749, 97856, 97859, 97869, 97873, 97875, 97876, 97881, 97886, 97890, 97895, 97897, 97899, 97506, 97514, 97515, 97523, 97532, 97533, 97538, 97553, 97564, 97577, 97580, 97583, 97585, 97757, 97763, 97764, 97767, 97769, 97783, 97797, 97606, 97614, 97615, 97620, 97621, 97627, 97631, 97633, 97644, 94274, 94275, 94278, 94280, 94282, 94288, 94292, 94293, 94294, 94295, 94296, 94299, 95159, 95175, 95187, 95352, 95376, 95378, 95381, 95385, 95388, 95392, 95396, 95252, 95257, 95260, 95262, 95274, 95276, 95288, 95210, 95216, 95220, 95235, 95244, 95551, 95555, 95557, 95578, 95581, 95586, 95590, 95594, 95407, 95411, 95426, 95430, 95445, 95447, 95450, 95455, 95457, 95458, 95468, 95470, 95472, 95477, 95485, 95493, 95501, 95514, 95519, 95527, 95541, 95305, 95325, 95333, 95341, 95344, 95349, 96753, 96765, 96767, 96783, 96789, 96791, 96907, 96915, 96917, 96923, 96925, 96929, 96930, 96931, 96938, 96947, 96949, 96853, 96857, 96858, 96862, 96873, 96876, 96885, 96886, 96890, 97019, 97032, 96708, 96715, 96748, 96813, 96816, 96818, 96825, 96841, 96845, 96847, 96958, 96959, 96983, 96999, 97001, 98561, 98568, 98584, 98591, 98595, 98351, 98367, 98372, 98374, 98383, 98384, 98399, 98501, 98506, 98507, 98511, 98515, 98517, 98523, 98524, 98529, 98533, 98536, 98548, 98411, 98419, 98421, 98425, 98438, 98448, 98449, 98751, 98757, 98760, 98779, 98791, 98792, 98796, 98717, 98718, 98737, 98749, 98458, 98469, 98490, 98492, 98665, 98678, 98689, 98699, 98604, 98606, 98610, 98614, 98628, 98629, 98633, 98637, 98638, 98639, 93953, 93977, 93980, 93982, 93985, 93987, 93993, 93996, 94000, 94153, 94155, 94165, 94172, 94177, 94193, 94200, 94056, 94061, 94064, 94065, 94068, 94073, 93853, 93870, 93871, 93874, 93878, 93882, 93899, 93521, 93525, 93531, 93544, 93609, 93616, 93619, 93622, 93636, 93638, 93643, 93644, 94106, 94111, 94115, 94117, 94122, 94127, 94136, 94138, 94141, 94142, 94147, 93553, 93563, 93564, 93576, 93578, 93584, 93585, 93591, 93596, 93599, 93407, 93433, 93442, 93446, 93447, 94083, 94084, 95706, 95707, 95716, 95724, 95740, 95743, 95746, 95749, 95659, 95665, 95672, 95686, 95698, 95854, 95857, 95892, 95899, 95601, 95621, 95644, 95645, 95752, 95756, 95764, 95769, 95777, 95779, 95783, 95789, 95794, 95797, 95902, 95903, 95910, 95912, 95913, 95918, 95925, 95926, 95934, 95937, 95943, 95945, 95946, 95804, 95805, 95815, 95819, 95826, 95828, 95830, 95837, 95843, 95848, 95849, 95951, 95966, 97154, 97160, 97177, 97178, 97180, 97181, 97196, 97361, 97388, 97391, 97398, 97399, 97400, 97203, 97214, 97228, 97248, 97261, 97423, 97431, 97435, 97442, 97444, 97449, 97450, 97457, 97459, 97461, 97465, 97482, 97116, 97120, 97121, 97129, 97137, 97140, 97145, 97149, 97150, 97302, 97308, 97310, 97313, 97322, 97328, 97331, 97335, 97344, 97052, 97053, 97057, 97059, 97079, 97082, 97093, 97098, 97100, 94606, 94615, 94639, 94007, 94015, 94016, 94018, 94027, 94038, 94041, 94042, 94044, 93913, 93918, 93941, 94406, 94411, 94415, 94418, 94423, 94425, 94441, 94448, 94552, 94581, 94599, 94355, 94356, 94362, 94363, 94365, 94371, 94379, 94381, 94397, 94503, 94507, 94514, 94520, 94523, 94530, 94535, 94540, 94545, 94212, 94237, 94241, 94245, 94307, 94317, 94324, 94328, 94341, 94342, 94344, 94347, 94456, 94458, 94462, 94466, 94469, 94481, 94486, 94493, 94498, 96453, 96463, 96475, 96489, 96494, 96410, 96414, 96421, 96424, 96447, 96449, 96654, 96667, 96693, 96356, 96364, 96367, 96389, 96391, 96395, 96399, 96601, 96607, 96618, 96623, 96630, 96632, 96642, 96644, 96505, 96508, 96512, 96538, 96541, 96559, 96563, 96583, 96591, 96599, 96553, 98206, 98234, 98235, 98236, 98238, 98243, 97959, 97960, 97966, 97968, 97980, 97988, 97994, 98305, 98310, 98321, 98326, 98329, 98330, 98343, 98344, 98349, 98350, 98253, 98272, 98278, 98284, 98295, 98103, 98109, 98110, 98120, 98131, 98133, 98148, 98079, 98089, 98092, 98001, 98003, 98005, 98006, 98008, 98011, 98026, 98028, 98033, 98188, 98198, 98154, 98161, 98164, 98963, 98964, 98966, 98975, 98979, 98994, 99101, 99110, 99111, 99115, 99120, 99134, 99137, 99144, 99161, 99162, 99174, 99175, 99176, 99179, 99180, 98809, 98810, 98836, 98840, 98841, 98845, 98850, 98876, 98882, 98887, 100500, 100512, 100519, 100528, 100538, 100546, 100548, 100450, 100457, 100458, 100471, 100485, 100495, 100757, 100764, 100766, 100769, 100781, 100785, 100791, 100798, 100706, 100710, 100731, 100739, 100748, 100850, 100857, 100865, 100871, 100876, 100889, 100897, 100804, 100806, 100827, 100828, 100837, 100600, 100613, 100618, 100625, 100632, 100633, 100636, 100665, 100666, 100673, 100674, 100678, 100684, 100687, 100692, 100699, 100557, 100565, 100574, 100583, 101700, 101704, 101705, 101711, 101714, 101720, 101722, 101724, 101726, 101445, 101350, 101356, 101362, 101368, 101381, 101384, 101479, 101486, 101492, 101564, 101566, 101570, 101579, 101580, 101582, 101583, 101594, 101598, 101501, 101505, 101506, 101517, 101522, 101524, 101537, 101539, 101540, 101544, 101547, 101778, 101784, 101794, 101798, 101602, 101618, 101626, 101631, 101636, 101637, 101638, 101648, 101649, 101651, 101686, 100355, 100356, 100364, 100374, 100375, 100377, 100393, 100399, 100405, 100415, 100422, 100424, 100428, 100429, 100430, 100437, 100440, 100448, 100210, 100216, 100229, 100236, 100237, 100242, 100249, 100143, 100145, 100147, 100150, 100172, 100188, 100195, 100198, 100051, 100065, 100075, 100076, 100082, 100094, 100253, 100262, 100271, 100280, 100284, 100285, 100287, 100291, 100305, 100311, 100318, 100331, 100334, 100339, 100344, 100346, 101952, 101957, 101969, 101970, 101973, 101991, 101995, 101999, 102002, 102003, 102004, 102015, 102018, 102041, 101820, 101828, 101840, 101849, 101850, 101877, 101879, 101889, 101890, 101899, 102052, 102058, 102065, 102068, 102076, 102080, 102091, 102099, 102101, 102103, 102111, 102116, 102118, 102126, 102132, 102146, 102161, 102164, 102175, 102194, 102197, 101905, 101911, 101915, 101919, 101922, 101924, 101929, 101931, 101806, 102711, 102714, 102718, 102719, 102728, 102734, 102744, 102747, 102905, 102908, 102942, 102945, 103055, 103056, 103060, 103061, 103062, 103071, 103073, 103090, 103095, 102756, 102757, 102772, 102778, 102786, 102794, 102797, 102869, 102885, 102803, 102806, 102808, 102810, 102812, 102813, 102816, 102819, 102820, 102824, 102831, 102833, 102842, 102849, 102650, 102651, 102664, 102665, 102677, 102678, 102694, 102953, 102963, 102967, 102973, 102979, 102983, 102990, 102995, 103001, 103015, 103023, 103028, 103030, 103034, 103045, 103048, 102613, 102615, 102628, 102637, 103208, 103210, 103233, 103239, 103352, 103358, 103373, 103376, 103305, 103311, 103318, 103322, 103329, 103330, 103331, 103337, 103343, 103403, 103410, 103417, 103444, 103448, 103115, 103133, 103135, 103138, 103140, 103141, 103144, 103258, 103269, 103292, 103296, 103505, 103521, 103529, 103536, 103541, 103546, 103456, 103457, 103468, 103476, 103478, 103480, 103487, 103491, 103150, 103157, 103186, 103190, 103199, 103853, 103864, 103872, 103874, 103880, 103891, 103899, 103700, 103701, 103708, 103709, 103710, 103728, 103731, 103734, 103735, 103741, 103746, 103748, 103913, 103932, 103938, 103550, 103552, 103566, 103580, 103800, 103801, 103807, 103810, 103815, 103818, 103838, 103842, 103849, 103655, 103658, 103669, 103685, 103690, 103692, 103695, 103752, 103755, 103759, 103760, 103779, 103786, 103790, 103793, 103797, 103603, 103611, 103636, 103637, 103642, 103643, 103649, 104102, 104103, 104109, 104110, 104111, 104121, 104122, 104124, 104127, 104128, 104129, 104133, 104135, 104136, 103950, 103959, 103968, 103974, 103990, 103998, 104212, 104213, 104224, 104233, 104239, 104240, 104001, 104007, 104012, 104018, 104023, 104028, 104035, 104044, 104358, 104367, 104368, 104376, 104390, 104393, 104394, 104159, 104183, 104186, 104187, 104193, 104253, 104263, 104266, 104271, 104282, 104294, 105060, 105079, 105089, 105201, 105207, 105209, 105216, 105232, 105235, 105016, 105025, 105031, 104902, 104903, 104904, 104907, 104914, 104919, 104926, 104935, 104948, 104707, 104718, 104722, 104729, 104742, 104743, 104813, 104833, 104847, 105109, 105121, 105123, 105129, 105146, 105147, 105150, 105160, 105170, 105172, 105189, 105190, 104966, 104850, 104869, 104875, 104881, 104887, 104888, 105955, 105971, 105972, 105973, 105988]
GoodDatasets = []
print("Get Datasets({})".format(len(index)))
# Load and Validate Datasets
n_dataset=1
for i in index:
    try:
        task  = openml.tasks.get_task(i)
        dataset = task.get_dataset()
        data_set_id = task.dataset_id
        X, y, categorical_indicator, attribute_names = dataset.get_data(dataset_format='dataframe')
        target = dataset.default_target_attribute
        dtype = X[target].dtype
        y_type = type_of_target(X[target])
        print("OpenML Dataset[{}][{}][{}]: {} - {} (examples, features)".format(n_dataset,data_set_id,i,y_type,np.shape(X)))
        if dtype in (np.int, np.int32, np.int64, np.float, np.float32,
                    np.float64, int, float):
            Datasets.append(X)
            TargetNames.append(target)
            GoodDatasets.append(data_set_id)
            print("Valid!")
            n_dataset=n_dataset+1
        else:     
            print("Invalid!")      
    except Exception as e:
        print("Error ", i, e)
        save(np.unique(GoodDatasets))

save(np.unique(GoodDatasets))
print("Valid Datasets:", *np.unique(GoodDatasets))
#####################