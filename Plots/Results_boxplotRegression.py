import matplotlib.pyplot as plt
import numpy as np
import pandas as pd

valid_workflows = [True, True, True, True, False, True, True, False, True, True, True, True, True, False, True, True, False, True, True, True, True, True, False, True, True, False, True, True, True, True, True, False, True, True, False, True, True, True, True, True, False, True, True, False, True, True, True, True, True, False, True, True, False, True, True, True, True, True, False, True, True, False, True, True, True, True, True, False, True, True, False, True, True, True, True, True, False, True, True, False, True]
dataset_predicts = []

a = np.array([4357951.683275326,3061913.0532854777,4370007.108646703,4426916.862155839,4349642.087282754,3690622.666518729,4351644.659474544,5162325.052490557,4280504.101871544,1806664.0315211006,5314277.864789984,3290471.9673370095,8777735.764972162,7168072.037940107,14176995.799721695,13233916.833785798,4363579.787349714,4481788.223294606,4360368.2422694145,4536352.608037069,4361679.658005632,4534692.132984731,4367573.161475593,4522898.382994708,4366306.294091333,2784859.124195225,4368598.014155769,4444303.334269135,4337235.845228797,3043636.47340191,4354079.685260438,3734490.5736723826,4283199.339391814,1774576.154553881,5400509.600346839,3329623.8193091443,8778926.77332077,7150824.749350864,14448894.947017964,13549419.011512127,4366021.11953349,4506639.740753786,4359354.941284754,4543788.849361801,4358360.405465998,4529974.88272949,4361484.4862831775,4532286.787273434,4369020.234614501,2679460.238538373,4369948.119250512,4454765.718786528,4377779.995298361,2850607.0438618837,4336149.642299927,3102496.7765693786,4283873.419573405,1753582.0961919434,5398293.120591396,3300063.012653641,8775718.142094506,7139335.993147645,14450602.590016909,13540897.437313166,4365704.449637139,4506026.570018959,4358477.440835589,4539001.4374616165,4357796.234374711,4541737.403704009,4358360.405465998,4533655.23461365])
dataset_predicts.append(np.array(np.interp(a, (a.min(), a.max()), (-1, +1)) * -1))
a = np.array([785.7413101604278,1487.4213458110517,787.8386809269163,1369.0042335115866,774.7651515151515,1553.0913547237078,728.5320855614973,1691.454099821747,684.3948285394225,775.214573885918,755.422676781183,831.9895061497326,1020.6479022439333,1043.7836005347594,1485.036624503921,1499.3921557932265,822.145944741533,1533.424019607843,770.6773618538325,1498.8393493761141,745.9714795008913,1359.6876114081997,723.408422459893,1371.4055258467024,742.4467468805703,1357.2814171122996,783.8651960784314,1297.6430481283423,734.5069073083779,1280.1579768270944,766.7415329768271,1502.1896167557932,674.9593026347184,741.9601481729055,757.9594652938542,834.3433769385027,1013.9166232697123,1006.5638309269161,1500.9027224581243,1508.5218456105167,876.1853832442068,1436.8123885918003,757.364081996435,1358.1942959001783,757.364081996435,1358.1942959001783,744.2067736185384,1374.299688057041,784.975935828877,1484.3694295900177,781.0650623885917,1289.5842245989306,729.6038324420678,1346.0006684491977,733.280303030303,1246.3565062388593,673.6880504076419,738.2051578654189,748.1195591207537,812.7626391042782,1003.4331516531763,997.3294899342691,1501.50949606929,1487.5030715574865,865.0089126559715,1552.5042335115863,753.1361408199643,1461.51247771836,776.3861408199643,1422.795008912656,757.364081996435,1358.1942959001783])
dataset_predicts.append(np.array(np.interp(a, (a.min(), a.max()), (-1, +1)) * -1))
a = np.array([0.7183048433048432,0.8326210826210827,0.7275641025641025,0.7955840455840456,0.709045584045584,0.8141025641025641,0.6709401709401709,0.8846153846153846,0.612638527122073,0.6163716524216524,0.5918845635235159,0.5725723646723647,0.5793251575780519,0.5399572649572649,0.588968837533613,0.5618403133903134,0.7945156695156695,1.0395299145299144,0.7945156695156695,1.1926638176638176,0.813034188034188,1.1926638176638176,0.775997150997151,1.3465099715099715,0.7183048433048432,0.9683048433048433,0.709045584045584,1.0811965811965811,0.709045584045584,1.023860398860399,0.6805555555555556,0.952991452991453,0.6215056802224783,0.6198415954415954,0.6045527987012965,0.5765158831908831,0.5927480023539902,0.5522701566951567,0.6025376081913606,0.5659370370370371,0.7945156695156695,1.0395299145299144,0.813034188034188,1.0576923076923077,0.813034188034188,1.0576923076923077,0.775997150997151,1.0576923076923077,0.709045584045584,1.0146011396011396,0.6997863247863247,0.9173789173789174,0.6997863247863247,0.8717948717948718,0.6997863247863247,1.0715811965811965,0.6200801295861688,0.6156382923789173,0.6050196961982418,0.5634746705840457,0.5914322038858463,0.5453984953703703,0.6067646763510232,0.5831254807692309,0.7945156695156695,1.0395299145299144,0.813034188034188,1.0854700854700856,0.813034188034188,1.0854700854700856,0.813034188034188,1.0854700854700856])
dataset_predicts.append(np.array(np.interp(a, (a.min(), a.max()), (-1, +1)) * -1))
a = np.array([621694.3996215198,411796.74894800805,613870.8746902421,446548.25220892916,626203.4760987095,436574.9858086881,644398.5486836137,453386.9985713899,558780.9200921535,241533.5165751361,723616.1027137726,416730.3088254238,1230789.68292883,979004.2478536349,2020629.5025522388,1866576.7325280719,619074.7530484914,467156.6127366347,600234.1985911941,480896.4238850409,600286.2592935828,481210.89769018797,598012.4598770448,474670.0974645556,633006.2099938387,384823.1497637038,614489.0810566975,450393.6185407865,628905.4265518362,395268.52768270636,626203.4760987095,435524.38129671756,556685.5870990574,238271.32306736716,735266.8344514519,427958.53506725735,1229336.4732947394,975648.9520607361,2058523.607676638,1908395.4514531957,621649.7720224313,467952.16035386873,602956.1271107545,477864.3347111635,603503.8294283529,478318.76348039217,600286.2592935828,479152.03028687305,631134.207656267,389522.09668423655,616484.8059096049,456653.50114001054,622397.718640823,395196.2277236689,625839.6300509154,394480.5051228537,556599.3021671019,237252.2665863192,735400.9364322654,431007.126927056,1228887.1046626908,974357.4307852425,2057551.6584617447,1906554.6004338225,629237.682188414,476061.648414649,602947.1930400959,483204.8497919714,602386.994970243,483204.8497919714,602908.6599992552,478318.76348039217])
dataset_predicts.append(np.array(np.interp(a, (a.min(), a.max()), (-1, +1)) * -1))
a = np.array([1.6224547511312217,1.2165346907993968,1.6515837104072397,1.3368212669683257,1.646681749622926,1.380184766214178,1.5098039215686274,1.4831259426847663,1.0591331787242853,0.7756343891402715,1.1685308872509852,0.8806673831070891,1.410332289925792,1.1665358974358975,1.7763257786702233,1.64486802413273,1.5244155354449473,1.8980015082956259,1.4234539969834088,1.7565045248868778,1.4139328808446456,1.7565045248868778,1.4619155354449473,1.6890082956259427,1.6941930618401206,1.0961538461538463,1.626131221719457,1.1345211161387632,1.636500754147813,1.2800716440422324,1.6365950226244343,1.3128770739064857,1.033871417055537,0.7587056655354449,1.1718949220589772,0.861959737933635,1.4029020086279447,1.1469393288084464,1.7987323131940456,1.6576984445701357,1.5436463046757165,1.8980015082956259,1.3705693815987934,1.858503016591252,1.3705693815987934,1.858503016591252,1.3610482654600302,1.858503016591252,1.659973604826546,1.1048265460030167,1.5588235294117647,1.259049773755656,1.5444947209653093,1.1282051282051282,1.6262254901960784,1.2803544494720964,1.0240595163200819,0.7522228294683257,1.161350462507286,0.8601381834464554,1.383154150525981,1.1255048925339368,1.7977883412781046,1.6512870993589743,1.5339366515837105,1.8980015082956259,1.4234539969834086,1.8687782805429864,1.4234539969834086,1.8687782805429864,1.413838612368024,1.8687782805429864])
dataset_predicts.append(np.array(np.interp(a, (a.min(), a.max()), (-1, +1)) * -1))
a = np.array([4783.877657312925,6830.363414115646,4834.369260204082,6136.265518707483,4844.994260204082,6903.2860331632655,4908.715242346939,6760.239795918367,4512.290148189892,4209.100465646258,5531.582490050516,5152.791481547619,9311.216869814294,9029.84996207483,15413.773507029913,15172.502390221089,4997.210140306122,6008.462053571428,4584.530718537415,5664.005739795918,4584.530718537415,5664.005739795918,4414.890093537415,5629.052614795918,4576.754145408163,6183.18643707483,4815.925382653061,6330.244366496599,4797.201424319728,6705.334608843537,4970.0634566326535,7115.556760204082,4542.959327266132,4132.903133577806,5636.835020444525,5231.049291507228,9295.310656154981,8941.896270673893,15709.54988450868,15526.607375914116,5103.170705782313,6720.794961734694,4661.301020408164,6011.623299319728,4661.301020408164,6011.623299319728,4593.000106292517,5664.479698129252,5191.386904761905,6219.187712585034,4822.899340986394,6390.892857142857,5022.582801870749,7326.487351190476,5056.716517857143,7195.299744897959,4555.156655857656,4165.836462518601,5615.482120080256,5200.064231789434,9280.205920065944,8958.364614721513,15715.596515041203,15524.63656543633,5064.282206632653,7015.136479591836,4764.151360544218,6673.987138605442,4764.151360544218,6673.987138605442,4762.688775510204,6315.952912414966])
dataset_predicts.append(np.array(np.interp(a, (a.min(), a.max()), (-1, +1)) * -1))
a = np.array([1631.560169816139,643.806147854954,1663.298901940756,755.689383299285,1677.5447522982636,580.0076608784474,1552.275121297242,691.1197650663943,1385.2612333157158,438.309018845761,2207.0488872475275,1276.84081523238,5025.725720462211,4247.26866823289,9394.16636785882,8919.673303728294,1545.890289836568,794.5948672114403,1533.590430286006,861.0280898876405,1521.1343526557712,860.9655898876405,1553.6279366700714,788.8889172625128,1637.9840079162411,562.3524004085801,1609.5450715015322,771.6848186925433,1682.6753383554646,531.2007469356486,1601.6046986721144,606.7434563329929,1389.8227078436234,429.1142274961696,2283.871240268912,1359.7754643130745,5032.3270077859515,4262.052693398877,9597.44052303312,9135.489340759064,1478.851251276813,823.8229379468846,1459.541145301328,915.2132277834526,1464.3806179775281,915.2132277834526,1508.4172944330949,848.9201353421859,1733.1217760469867,675.4313074565883,1682.55659473953,855.6366189989785,1673.695448161389,701.205120020429,1607.0815883554646,555.8080949948927,1386.2891532276067,425.5996228828843,2281.5761732045316,1356.3708775727782,5029.63089125307,4253.827540544401,9599.470519460523,9145.56546233561,1653.7703332482124,854.3572522982636,1594.756320224719,1012.4569394790603,1595.7108656792645,1012.4569394790603,1477.1590270684374,930.731422369765])
dataset_predicts.append(np.array(np.interp(a, (a.min(), a.max()), (-1, +1)) * -1))
a = np.array([165.10876623376623,268.9935064935065,163.05357142857144,309.8181818181818,171.29058441558442,276.60930735930737,158.0319264069264,274.9891774891775,151.05221719310865,185.51145464222157,163.27891012034243,195.50852418614718,227.69370500017868,243.68705938365804,344.7825082517989,350.0527592005772,148.78841991341992,316.3625541125541,153.77218614718615,332.68993506493507,153.77218614718615,326.49945887445887,154.43452380952382,310.75757575757575,169.63311688311688,251.86038961038963,175.99025974025975,311.3544372294372,176.66179653679654,261.47564935064935,179.1883116883117,287.13257575757575,152.39982237752716,184.58944593224547,166.24408711423976,201.23805506203402,229.07913923732312,241.71672871553332,350.1538235379135,356.89068497578467,150.36796536796538,325.7056277056277,155.27867965367966,337.3658008658009,155.27867965367966,337.3658008658009,152.08549783549785,329.3030303030303,188.5660173160173,258.9420995670996,181.92261904761904,311.74242424242425,171.07142857142856,310.43939393939394,175.96861471861473,258.4193722943723,152.44441739618512,184.93793609021097,166.87364434945297,199.18912995152877,227.59646575406217,239.041251427468,350.0621776102321,353.7073324147351,150.82792207792207,299.7056277056277,153.93777056277057,308.54383116883116,154.58549783549785,308.54383116883116,153.1650432900433,329.2711038961039])
dataset_predicts.append(np.array(np.interp(a, (a.min(), a.max()), (-1, +1)) * -1))
a = np.array([78.60205776666949,16.396742796076932,77.06637624201795,18.51256483214448,76.9913640274424,15.192971679703657,77.05887972876829,14.742704589273949,76.75612542163464,8.49694643159205,178.3573658538219,116.00729100617932,522.2398264079748,472.5505452198672,1055.2739284596971,1025.2986772513993,77.35015063832107,18.850903343289914,77.44114253485047,18.931894616924634,77.44114253485047,18.928363096020192,77.44114253485047,18.581730717759605,78.26680708562174,17.524931359925098,77.0668996195476,18.331003682864846,77.05940310629795,16.08959756136729,76.9913640274424,15.209894219829268,76.77666083150929,8.392273792752231,186.9665220215075,125.02192047335616,522.1044369707631,472.60478074630083,1081.87831388296,1053.0458576961437,77.35015063832107,18.484430795913422,77.44114253485047,18.395773781194613,77.44114253485047,18.487504148575955,77.44114253485047,19.002195947096777,78.26680708562174,17.078590209263417,77.0668996195476,19.674792887515924,77.05940310629795,17.27804145364155,77.05940310629795,15.703513928995845,76.76309276752299,8.349536091896066,186.9630850171792,125.12162848959717,522.003891048352,472.61806085657383,1081.700631089012,1053.1129898124204,77.35015063832107,18.629990213740474,77.44114253485047,18.42554388925711,77.44114253485047,18.070662779414498,77.44114253485047,18.437650188182324])
dataset_predicts.append(np.array(np.interp(a, (a.min(), a.max()), (-1, +1)) * -1))
a = np.array([1149.608660130719,1320.3586601307188,1265.499183006536,1520.5735294117646,1062.985294117647,1357.3717320261437,1201.0539215686274,1465.3864379084966,799.9570393315345,775.8740859477125,856.6357078263908,851.7756826797386,1202.5881546393498,1145.4220725490195,1840.0714948825712,1781.0217794117646,972.7483660130719,1452.264705882353,1061.513071895425,1527.6993464052289,1109.888071895425,1595.8447712418301,1117.6781045751634,1620.6200980392157,1045.2385620915034,1269.361111111111,1198.001633986928,1459.7720588235293,983.3946078431372,1146.485294117647,1046.5882352941176,1289.752450980392,809.1560265262223,762.6209991830065,870.5676480603572,850.2178991013072,1199.771930640829,1153.2858774509805,1874.0286665176486,1827.1052296568628,970.8660130718954,1434.936274509804,1040.3218954248366,1546.763888888889,1040.3218954248366,1594.8088235294117,1109.888071895425,1618.4183006535948,1028.6560457516339,1218.56454248366,1130.8080065359477,1465.485294117647,1142.611111111111,1163.4779411764705,1034.1168300653594,1146.485294117647,800.9623693018623,747.0611894403595,876.9379332668466,885.580228635621,1206.0324717254769,1163.7940128472223,1872.8667495563031,1840.5314215686276,964.6160130718954,1321.9738562091502,983.1895424836601,1470.5645424836603,983.1895424836601,1530.7173202614379,1040.3218954248366,1594.8088235294117])
dataset_predicts.append(np.array(np.interp(a, (a.min(), a.max()), (-1, +1)) * -1))
print(np.size(dataset_predicts[0]))

bagging_predicts = []
labels = []
for i in range(0,72):
    bagging_predicts.append([])
    labels.append("Teste")

for dataset_predict in dataset_predicts:
    for i in range(0,72):
        bagging_predicts[i].append(dataset_predict[i])

df = pd.DataFrame({
    'MaxDepth=1 50 OLA - None 25%' : bagging_predicts[0],
    '50 OLA - None 25%' : bagging_predicts[1],
    'MaxDepth=1 50 OLA - RE 25%' : bagging_predicts[2],
    '50 OLA - RE 25%' : bagging_predicts[3],
    'MaxDepth=1 50 OLA - RE 50%' : bagging_predicts[4],
    '50 OLA - RE 50%' : bagging_predicts[5],
    'MaxDepth=1 50 OLA - RE 75%' : bagging_predicts[6],
    '50 OLA - RE 75%' : bagging_predicts[7],
    'MaxDepth=1 50 None - None' : bagging_predicts[8],
    '50 None - None 25%' : bagging_predicts[9],
    'MaxDepth=1 50 None - RE 25%' : bagging_predicts[10],
    '50 None - RE 25%' : bagging_predicts[11],
    'MaxDepth=1 50 None - RE 50%' : bagging_predicts[12],
    '50 None - RE 50%' : bagging_predicts[13],
    'MaxDepth=1 50 None - RE 75%' : bagging_predicts[14],
    '50 None - RE 75%' : bagging_predicts[15],
    'MaxDepth=1 50 KNORAE - None' : bagging_predicts[16],
    '50 KNORAE - None ' : bagging_predicts[17],
    'MaxDepth=1 50 KNORAE - RE 25%' : bagging_predicts[18],
    '50 KNORAE - RE 25.0%' : bagging_predicts[19],
    'MaxDepth=1 50 KNORAE - RE 50%' : bagging_predicts[20],
    '50 KNORAE - RE 50%' : bagging_predicts[21],
    'MaxDepth=1 50 KNORAE - RE 75%' : bagging_predicts[22],
    '50 KNORAE - RE 75%' : bagging_predicts[23],
    'MaxDepth=1 100 OLA - None' : bagging_predicts[24],
    '100 OLA - None' : bagging_predicts[25],
    'MaxDepth=1 100 OLA - RE 25%' : bagging_predicts[26],
    '100 OLA - RE 25%' : bagging_predicts[27],
    'MaxDepth=1 100 OLA - RE 50%' : bagging_predicts[28],
    '100 OLA - RE 50%' : bagging_predicts[29],
    'MaxDepth=1 100 OLA - RE 75%' : bagging_predicts[30],
    '100 OLA - RE 75%' : bagging_predicts[31],
    'MaxDepth=1 100 None - None' : bagging_predicts[32],
    '100 None - None' : bagging_predicts[33],
    'MaxDepth=1 100 None - RE 25%' : bagging_predicts[34],
    '100 None - RE 25%' : bagging_predicts[35],
    'MaxDepth=1 100 None - RE 50%' : bagging_predicts[36],
    '100 None - RE 50%' : bagging_predicts[37],
    'MaxDepth=1 100 None - RE 75%' : bagging_predicts[38],
    '100 None - RE 75%' : bagging_predicts[39],
    'MaxDepth=1 100 KNORAE - None' : bagging_predicts[40],
    '100 KNORAE - None' : bagging_predicts[41],
    'MaxDepth=1 100 KNORAE - RE 25%' : bagging_predicts[42],
    '100 KNORAE - RE 25%' : bagging_predicts[43],
    'MaxDepth=1 100 KNORAE - RE 50%' : bagging_predicts[44],
    '100 KNORAE - RE 50%' : bagging_predicts[45],
    'MaxDepth=1 100 KNORAE - RE 75%' : bagging_predicts[46],
    '100 KNORAE - RE 75%' : bagging_predicts[47],
    'MaxDepth=1 200 OLA - None' : bagging_predicts[48],
    '200 OLA - None' : bagging_predicts[49],
    'MaxDepth=1 200 OLA - RE 25%' : bagging_predicts[50],
    '200 OLA - RE 25%' : bagging_predicts[51],
    'MaxDepth=1 200 OLA - RE 50%' : bagging_predicts[52],
    '200 OLA - RE 50%' : bagging_predicts[53],
    'MaxDepth=1 200 OLA - RE 75%' : bagging_predicts[54],
    '200 OLA - RE 75%' : bagging_predicts[55],
    'MaxDepth=1 200 None - None' : bagging_predicts[56],
    '200 None - None' : bagging_predicts[57],
    'MaxDepth=1 200 None - RE 25%' : bagging_predicts[58],
    '200 None - RE 25%' : bagging_predicts[59],
    'MaxDepth=1 200 None - RE 50%' : bagging_predicts[60],
    '200 None - RE 50%' : bagging_predicts[61],
    'MaxDepth=1 200 None - RE 75%' : bagging_predicts[62],
    '200 None - RE 75%' : bagging_predicts[63],
    'MaxDepth=1 200 KNORAE - None' : bagging_predicts[64],
    '200 KNORAE - None 25%' : bagging_predicts[65],
    'MaxDepth=1 200 KNORAE - RE 25%' : bagging_predicts[66],
    '200 KNORAE - RE 25%' : bagging_predicts[67],
    'MaxDepth=1 200 KNORAE - RE 50%' : bagging_predicts[68],
    '200 KNORAE - RE 50%' : bagging_predicts[69],
    'MaxDepth=1 200 KNORAE - RE 75%' : bagging_predicts[70],
    '200 KNORAE - RE 75%' : bagging_predicts[71]
})
df = df.reindex(df.std().sort_values().index[::-1], axis=1)
boxplot = df.boxplot(grid=False, rot=90)

# set x-axis label
plt.xlabel("Bagging workflows", size=18)
# set y-axis label
plt.ylabel("Scaled Mean Square Error", size=18)
#print(bagging_predicts)

#df.boxplot()
plt.show()

# LAYOUT PARA O GRAFICO
#top=0.995,
#bottom=0.345,
#left=0.07,
#right=0.99,
#hspace=0.2,
#wspace=0.2